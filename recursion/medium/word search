class backtrack{
    static int[] dx = {-1 , +1 , 0 , 0};
    static int[] dy = {0,0,-1 ,+1};

    public static boolean search(char[][] ch , String word) {
        for (int i = 0; i < ch.length; i++) {
            for (int j = 0; j < ch[0].length; j++) {
                if(word.charAt(0) == ch[i][j]){
                 char temp = ch[i][j];
                ch[i][j] = '$';
                if(solve(ch , word , i , j , 1)){
                    return true;
                };
                ch[i][j] = temp;
                }
            }
        }
        return false;
        
    }
    public static boolean solve(char[][] ch , String word, int i , int j , int index) {
        if(index == word.length()){
            return true;
        }
        for (int j2 = 0; j2 < 4; j2++) {
            int ddx = i + dx[j2];
            int ddy = j+dy[j2];
            if(ddx < ch.length && ddy < ch[0].length && ddx >=0 && ddy>=0 && ch[ddx][ddy]==word.charAt(index)){
                char temp = ch[ddx][ddy];
                ch[ddx][ddy] = '$';
                if(solve(ch, word, ddx, ddy, index+1)){
                    return true;
                };
                ch[ddx][ddy] =temp;
            }

        }
        return false;
        
    }
    public static void main(String[] args) {
        char[][] ch = {{'A','B','C','E'},{'S','F','C','S'},{'A','D','E','E'}};
        String word = "ABCCER";
        System.out.println(search(ch , word));
    }
}
